parameters:
  agentOs: 'Windows'
  poolVmImage: ''
  dependsOn: ''
  beforeBuild: []
  afterBuild: []
  timeoutInMinutes: 60
  cMakeRunArgs: ''
  configuration: 'Release'
  gtestFlags: '--gtest_output=xml:$(Build.ArtifactStagingDirectory)/testOut/'

jobs:
- template: /eng/common/templates/job/job.yml
  parameters:
    name: ${{ coalesce(parameters.jobName, parameters.agentOs) }}
    displayName: ${{ coalesce(parameters.jobDisplayName, parameters.agentOs) }}
    dependsOn: ${{ parameters.dependsOn }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.agentOs, 'Windows')) }}:
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: ${{ variables._PublishUsingPipelines }}
    enablePublishTestResults: true # publish test results to AzDO (populates AzDO Tests tab)
    enableTelemetry: true
    pool:
      ${{ if eq(parameters.agentOs, 'macOS') }}:
        vmImage: macOS-10.14
      ${{ if eq(parameters.agentOs, 'Linux') }}:
        vmImage: ubuntu-16.04
      ${{ if eq(parameters.agentOs, 'Windows') }}:
        vmImage: windows-2019
    steps:
    - checkout: self
      clean: true

    - task: CacheBeta@1
      inputs:
        key: vcpkg | ${{ parameters.agentOs }} | azure-pipelines.yml
        path: ./submodules/vcpkg/installed
        cacheHitVar: CACHE_RESTORED
      displayName: Cache vcpkg packages
  
    - ${{ parameters.beforeBuild }}
  
    - task: CMake@1
      inputs:
        cmakeArgs: .. ${{ parameters.cMakeRunArgs }} -DCMAKE_TOOLCHAIN_FILE=../submodules/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=${{ parameters.configuration }} -DUSE_CPPRESTSDK=true
        workingDirectory: 'build.${{ parameters.configuration }}'
      displayName: Create build files
    - task: CMake@1
      inputs:
        cmakeArgs: --build . --config ${{ parameters.configuration }}
        workingDirectory: 'build.${{ parameters.configuration }}'
      displayName: Build client
    - ${{ if eq(parameters.agentOs, 'macOS') }}:
      - bash: "./run-tests.sh ./build.${{ parameters.configuration }}/bin/signalrclienttests ${{ parameters.gtestFlags }}"
        condition: eq( variables['Agent.OS'], 'Darwin' )
        displayName: Run tests
    - ${{ if eq(parameters.agentOs, 'Linux') }}:
      - bash: "./run-tests.sh ./build.${{ parameters.configuration }}/bin/signalrclienttests ${{ parameters.gtestFlags }}"
        condition: eq( variables['Agent.OS'], 'Linux' )
        displayName: Run tests
    - ${{ if eq(parameters.agentOs, 'Windows') }}:
      - powershell: "& ./build.${{ parameters.configuration }}/bin/${{ parameters.configuration }}/signalrclienttests.exe ${{ parameters.gtestFlags }}"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Run tests

    - ${{ parameters.afterBuild }}
  
    - task: PublishTestResults@2
      displayName: Publish test results
      condition: always()
      inputs:
        testRunner: junit
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/testOut/**/*.xml'
        testRunTitle: ${{ parameters.agentOs }}-unit_test